# Generated by Django 5.1.1 on 2024-10-08 11:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0008_lden_llpl_lpdn_lres_ltch_reld'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='drem',
            name='id',
        ),
        migrations.RemoveField(
            model_name='geol',
            name='id',
        ),
        migrations.AddField(
            model_name='grag',
            name='GRAG_D10',
            field=models.FloatField(null=True, verbose_name='Sieve size at which 10%\\ of the material passes through'),
        ),
        migrations.AddField(
            model_name='grag',
            name='GRAG_D50',
            field=models.FloatField(null=True, verbose_name='Sieve size at which 50%\\ of the material passes through'),
        ),
        migrations.AddField(
            model_name='grag',
            name='GRAG_D60',
            field=models.FloatField(null=True, verbose_name='Sieve size at which 60%\\ of the material passes through'),
        ),
        migrations.AlterField(
            model_name='drem',
            name='DREM_TOP',
            field=models.FloatField(primary_key=True, serialize=False, verbose_name='Depth to the Top of Stratum (m)'),
        ),
        migrations.AlterField(
            model_name='drem',
            name='LOCA_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='depth_remarks', to='core.loca', verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='geol',
            name='GEOL_TOP',
            field=models.FloatField(primary_key=True, serialize=False, verbose_name='Depth to the Top of Stratum (m)'),
        ),
        migrations.AlterField(
            model_name='geol',
            name='LOCA_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geology_descriptions', to='core.loca', verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='grag',
            name='LOCA_ID',
            field=models.CharField(max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='grat',
            name='LOCA_ID',
            field=models.CharField(max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='lden',
            name='LOCA_ID',
            field=models.CharField(max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='llpl',
            name='LOCA_ID',
            field=models.CharField(blank=True, max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='lnmc',
            name='LOCA_ID',
            field=models.CharField(max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='loca',
            name='LOCA_ID',
            field=models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='loca',
            name='PROJ_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='core.proj', verbose_name='Project ID'),
        ),
        migrations.AlterField(
            model_name='lpdn',
            name='LOCA_ID',
            field=models.CharField(blank=True, max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='lres',
            name='LOCA_ID',
            field=models.CharField(blank=True, max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='ltch',
            name='LOCA_ID',
            field=models.CharField(blank=True, max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='reld',
            name='LOCA_ID',
            field=models.CharField(blank=True, max_length=50, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='scpg',
            name='LOCA_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cone_penetration_tests', to='core.loca', verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='scpt',
            name='SCPG_TESN',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cone_id', to='core.scpg', unique=True, verbose_name='Test Reference or Push Number'),
        ),
        migrations.CreateModel(
            name='CONG',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(blank=True, max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(null=True, verbose_name='Depth to top of sample')),
                ('SAMP_REF', models.CharField(blank=True, max_length=50, verbose_name='Sample reference')),
                ('SAMP_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Sample type')),
                ('SPEC_REF', models.CharField(blank=True, max_length=50, verbose_name='Specimen reference')),
                ('SPEC_DPTH', models.FloatField(null=True, verbose_name='Depth to top of specimen')),
                ('SPEC_DESC', models.TextField(blank=True, verbose_name='Specimen description')),
                ('SPEC_PREP', models.TextField(blank=True, verbose_name='Details of specimen preparation including time between preparation and testing')),
                ('CONG_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Type of consolidation test')),
                ('CONG_COND', models.CharField(blank=True, max_length=50, verbose_name='Sample condition')),
                ('CONG_SDIA', models.FloatField(null=True, verbose_name='Test specimen diameter')),
                ('CONG_HIGT', models.FloatField(null=True, verbose_name='Test specimen height')),
                ('CONG_MCI', models.FloatField(null=True, verbose_name='Initial water/moisture content')),
                ('CONG_MCF', models.FloatField(null=True, verbose_name='Final water/moisture content')),
                ('CONG_BDEN', models.FloatField(null=True, verbose_name='Initial bulk density')),
                ('CONG_DDEN', models.FloatField(null=True, verbose_name='Initial dry density')),
                ('CONG_PDEN', models.FloatField(null=True, verbose_name='Particle density')),
                ('CONG_SATR', models.FloatField(null=True, verbose_name='Initial degree of saturation')),
                ('CONG_SPRS', models.FloatField(null=True, verbose_name='Swelling pressure')),
                ('CONG_SATH', models.FloatField(null=True, verbose_name='Height change of specimen on saturation or flooding')),
                ('CONG_IVR', models.FloatField(null=True, verbose_name='Initial voids ratio')),
                ('CONG_REM', models.TextField(blank=True, verbose_name='Remarks')),
                ('CONG_METH', models.CharField(blank=True, max_length=50, verbose_name='Test method')),
                ('CONG_LAB', models.CharField(blank=True, max_length=50, verbose_name='Name of testing laboratory/organization')),
                ('CONG_CRED', models.CharField(blank=True, max_length=50, verbose_name='Accrediting body and reference number')),
                ('TEST_STAT', models.CharField(blank=True, max_length=50, verbose_name='Test status')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='File reference')),
                ('SPEC_BASE', models.FloatField(null=True, verbose_name='Depth to base of specimen')),
                ('CONG_DEV', models.TextField(blank=True, verbose_name='Deviations from the test method')),
                ('CONG_MCIS', models.CharField(blank=True, max_length=50, verbose_name='Initial water/moisture content source')),
                ('CONG_CORR', models.BooleanField(default=False, verbose_name='Results corrected for equipment deformation')),
                ('CONG_EVES', models.FloatField(null=True, verbose_name='Effective Overburden')),
                ('CONG_OCR', models.FloatField(null=True, verbose_name='Overconsolidation Ratio')),
                ('CONG_RPCP', models.FloatField(null=True, verbose_name='Pre-consolidation Pressure ')),
                ('CONG_RCOR', models.FloatField(null=True, verbose_name='Compression Index')),
                ('CONG_IID', models.FloatField(null=True, verbose_name='Re-compression Index')),
                ('CONG_CSQ', models.FloatField(null=True, verbose_name='Sample Quality')),
                ('CONG_RSWP', models.FloatField(null=True, verbose_name='Swelling Pressure')),
                ('CONG_SWLL', models.FloatField(null=True, verbose_name='Swell Index')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consolidation_general', to='core.samp', verbose_name='Sample ID')),
            ],
        ),
        migrations.CreateModel(
            name='CONS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(blank=True, max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(null=True, verbose_name='Depth to top of sample')),
                ('SAMP_REF', models.CharField(blank=True, max_length=50, verbose_name='Sample reference')),
                ('SAMP_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Sample type')),
                ('SPEC_REF', models.CharField(blank=True, max_length=50, verbose_name='Specimen reference')),
                ('SPEC_DPTH', models.FloatField(null=True, verbose_name='Depth to top of specimen')),
                ('CONS_INCN', models.IntegerField(blank=True, verbose_name='Oedometer stress increment')),
                ('CONS_IVR', models.FloatField(null=True, verbose_name='Voids ratio at start of increment')),
                ('CONS_INCF', models.FloatField(null=True, verbose_name='Stress at end of stress increment/decrement')),
                ('CONS_INCE', models.FloatField(null=True, verbose_name='Voids ratio at end of stress increment')),
                ('CONS_INMV', models.FloatField(null=True, verbose_name='Reported coefficient of volume compressibility over stress increment')),
                ('CONS_INSC', models.FloatField(null=True, verbose_name='Coefficient of secondary compression over stress increment')),
                ('CONS_CVRT', models.FloatField(null=True, verbose_name='Coefficient of consolidation over stress increment determined by the root time method')),
                ('CONS_CVLG', models.FloatField(null=True, verbose_name='Coefficient of consolidation over stress increment determined by the log time method')),
                ('CONS_TEMP', models.FloatField(null=True, verbose_name='Average temperature over stress increment')),
                ('CONS_REM', models.TextField(blank=True, verbose_name='Remarks')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='File reference')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consolidation_test', to='core.cong', verbose_name='Sample ID')),
            ],
        ),
        migrations.CreateModel(
            name='ERES',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(blank=True, max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(null=True, verbose_name='Depth to top of sample')),
                ('SAMP_REF', models.CharField(blank=True, max_length=50, verbose_name='Sample reference')),
                ('SAMP_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Sample type')),
                ('SPEC_REF', models.CharField(blank=True, max_length=50, verbose_name='Laboratory specimen reference or Laboratory ID')),
                ('SPEC_DPTH', models.FloatField(null=True, verbose_name='Depth to top of test specimen')),
                ('ERES_CODE', models.CharField(blank=True, max_length=50, verbose_name='Chemical code')),
                ('ERES_METH', models.CharField(blank=True, max_length=50, verbose_name='Test method')),
                ('ERES_MATX', models.CharField(blank=True, max_length=50, verbose_name='Laboratory test matrix')),
                ('ERES_RTY', models.CharField(blank=True, max_length=50, verbose_name='Run type (Initial or Reanalysis)')),
                ('ERES_TESN', models.CharField(blank=True, max_length=50, verbose_name='Test reference')),
                ('ERES_NAME', models.CharField(blank=True, max_length=50, verbose_name='Chemical name')),
                ('ERES_TNAM', models.CharField(blank=True, max_length=50, verbose_name='Laboratory analytical test name')),
                ('ERES_RVAL', models.FloatField(null=True, verbose_name='Result value')),
                ('ERES_RUNI', models.CharField(blank=True, max_length=50, verbose_name='Result unit')),
                ('ERES_RTXT', models.CharField(blank=True, max_length=50, verbose_name='Reported result')),
                ('ERES_RTC', models.CharField(blank=True, max_length=50, verbose_name='Result type')),
                ('ERES_RRES', models.BooleanField(default=False, verbose_name='Reportable result')),
                ('ERES_DETF', models.BooleanField(default=False, verbose_name='Detect flag')),
                ('ERES_ORG', models.BooleanField(default=False, verbose_name='Organic')),
                ('ERES_IQLF', models.CharField(blank=True, max_length=50, verbose_name='Interpreted qualifiers')),
                ('ERES_LQLF', models.CharField(blank=True, max_length=50, verbose_name='Laboratory qualifiers')),
                ('ERES_RDLM', models.FloatField(null=True, verbose_name='Reporting detection limit')),
                ('ERES_MDL', models.FloatField(null=True, verbose_name='Method detection limit')),
                ('ERES_QLM', models.FloatField(null=True, verbose_name='Quantification limit')),
                ('ERES_DUIN', models.CharField(blank=True, max_length=50, verbose_name='Unit of detection / quantification limits')),
                ('ERES_TIC', models.FloatField(null=True, verbose_name='Tentatively Identified Compound (TIC) probability')),
                ('ERES_TICT', models.FloatField(null=True, verbose_name='Tentatively Identified Compound (TIC) retention time')),
                ('ERES_RDAT', models.DateTimeField(null=True, verbose_name='Sample receipt date at laboratory')),
                ('ERES_SGRP', models.CharField(blank=True, max_length=50, verbose_name='Sample delivery or batch code')),
                ('SPEC_PREP', models.TextField(blank=True, verbose_name='Details of specimen preparation including time between preparation and testing')),
                ('SPEC_DESC', models.CharField(blank=True, max_length=255, verbose_name='Specimen description')),
                ('ERES_DTIM', models.DateTimeField(null=True, verbose_name='Analysis date and time')),
                ('ERES_TEST', models.CharField(blank=True, max_length=50, verbose_name='Test Name')),
                ('ERES_TORD', models.CharField(blank=True, max_length=50, verbose_name='Total or dissolved')),
                ('ERES_LOCN', models.CharField(blank=True, max_length=50, verbose_name='Analysis location')),
                ('ERES_BAS', models.CharField(blank=True, max_length=50, verbose_name='Basis')),
                ('ERES_DIL', models.FloatField(null=True, verbose_name='Dilution factor')),
                ('ERES_LMTH', models.CharField(blank=True, max_length=50, verbose_name='Leachate method')),
                ('ERES_LDTM', models.DateTimeField(null=True, verbose_name='Leachate preparation date and time')),
                ('ERES_IRE', models.CharField(blank=True, max_length=50, verbose_name='Instrument Reference No or identifier')),
                ('ERES_ITP', models.CharField(blank=True, max_length=50, verbose_name='Instrument type')),
                ('ERES_SIZE', models.FloatField(null=True, verbose_name='Size of material removed prior to test')),
                ('ERES_PER', models.FloatField(null=True, verbose_name='Percentage of material removed')),
                ('ERES_REM', models.TextField(blank=True, verbose_name='Remarks')),
                ('ERES_LAB', models.CharField(blank=True, max_length=50, verbose_name='Name of testing laboratory/Organization')),
                ('ERES_CRED', models.CharField(blank=True, max_length=50, verbose_name='Accrediting body and reference number')),
                ('TEST_STAT', models.CharField(blank=True, max_length=50, verbose_name='Test status')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='File reference')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chemical_environmental', to='core.samp', verbose_name='Sample ID')),
            ],
        ),
        migrations.CreateModel(
            name='GCHM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(verbose_name='Depth to Top of Sample')),
                ('SAMP_REF', models.CharField(max_length=50, verbose_name='Sample Reference')),
                ('SAMP_TYPE', models.CharField(max_length=50, verbose_name='Sample Type')),
                ('SPEC_REF', models.CharField(max_length=50, verbose_name='Specimen Reference')),
                ('SPEC_DPTH', models.FloatField(verbose_name='Depth to Top of Test Specimen')),
                ('GCHM_CODE', models.CharField(max_length=50, verbose_name='Determinand')),
                ('GCHM_METH', models.CharField(max_length=255, verbose_name='Test Method')),
                ('GCHM_TYP', models.CharField(max_length=50, verbose_name='Test Type')),
                ('GCHM_RESL', models.FloatField(verbose_name='Test Result')),
                ('GCHM_UNIT', models.CharField(max_length=50, verbose_name='Test Result Units')),
                ('GCHM_NAME', models.CharField(max_length=255, verbose_name='Client/Laboratory Preferred Name of Determinand')),
                ('SPEC_DESC', models.TextField(verbose_name='Specimen Description')),
                ('SPEC_PREP', models.TextField(verbose_name='Details of Specimen Preparation')),
                ('GCHM_REM', models.TextField(verbose_name='Remarks on Test')),
                ('GCHM_LAB', models.CharField(max_length=255, verbose_name='Name of Testing Laboratory/Organization')),
                ('GCHM_CRED', models.CharField(max_length=50, verbose_name='Accrediting Body and Reference Number')),
                ('TEST_STAT', models.CharField(max_length=50, verbose_name='Test Status')),
                ('FILE_FSET', models.CharField(max_length=255, verbose_name='File Reference')),
                ('GCHM_RTXT', models.TextField(verbose_name='Reported Result')),
                ('GCHM_DLM', models.FloatField(verbose_name='Lower Detection Limit')),
                ('SPEC_BASE', models.FloatField(verbose_name='Depth to Base of Specimen')),
                ('GCHM_DEV', models.TextField(verbose_name='Deviations from the Test Method')),
                ('GCHM_SGRP', models.CharField(max_length=50, verbose_name='Sample Delivery or Batch Code')),
                ('GCHM_LSID', models.CharField(max_length=50, verbose_name='Laboratory Sample ID')),
                ('GCHM_RDEV', models.TextField(verbose_name='Result Deviation Description')),
                ('GCHM_RDAT', models.DateTimeField(verbose_name='Sample Receipt Date/Time at Laboratory')),
                ('GCHM_DTIM', models.DateTimeField(verbose_name='Analysis Date and Time')),
                ('GCHM_TEST', models.CharField(max_length=255, verbose_name='Test or Suite Name')),
                ('GCHM_IREF', models.CharField(max_length=50, verbose_name='Instrument Reference or Identifier')),
                ('GCHM_ITYP', models.CharField(max_length=50, verbose_name='Instrument Type')),
                ('GCHM_SIZE', models.FloatField(verbose_name='Size of Material Removed Prior to Test')),
                ('GCHM_PERP', models.FloatField(verbose_name='Percentage of Material Removed')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chemical', to='core.samp', verbose_name='Sample ID')),
            ],
        ),
        migrations.CreateModel(
            name='PSLG',
            fields=[
                ('PSLG_TESN', models.CharField(blank=True, max_length=50, primary_key=True, serialize=False, verbose_name='Test number')),
                ('PSLG_DIAM', models.FloatField(null=True, verbose_name='Expected hole diameter/bit size')),
                ('PSLG_CADE', models.FloatField(null=True, verbose_name='Casing shoe depth below seabed')),
                ('PSLG_REM', models.TextField(blank=True, verbose_name='Remarks')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='Associated file reference')),
                ('LOCA_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ps_logging_general', to='core.loca', verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='PSLT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(max_length=50, verbose_name='Location')),
                ('PSLT_DPTH', models.FloatField(verbose_name='Logging depth below seabed')),
                ('PSLT_P', models.FloatField(verbose_name='P-wave velocity')),
                ('PSLT_S', models.FloatField(verbose_name='S-wave velocity')),
                ('PSLT_BDEN', models.FloatField(verbose_name='Bulk density from gamma-gamma tool')),
                ('PSLT_CLPR', models.FloatField(verbose_name='Caliper measurement of equivalent hole diameter')),
                ('PSLT_NGAM', models.FloatField(verbose_name='Natural gamma')),
                ('PSLT_PVTC', models.CharField(max_length=50, verbose_name='P-wave trace class')),
                ('PSLT_SVTC', models.CharField(max_length=50, verbose_name='S-wave trace class')),
                ('PSLT_REM', models.TextField(verbose_name='Remarks')),
                ('PSLG_TESN', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ps_logging_test', to='core.pslg', verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='PTST',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(blank=True, max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(null=True, verbose_name='Depth to Top of Sample')),
                ('SAMP_REF', models.CharField(blank=True, max_length=50, verbose_name='Sample Reference')),
                ('SAMP_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Sample Type')),
                ('SPEC_REF', models.CharField(blank=True, max_length=50, verbose_name='Specimen Reference')),
                ('SPEC_DPTH', models.FloatField(null=True, verbose_name='Depth to Top of Test Specimen')),
                ('PTST_TESN', models.CharField(blank=True, max_length=50, verbose_name='Test Reference')),
                ('SPEC_DESC', models.TextField(blank=True, verbose_name='Specimen Description')),
                ('SPEC_PREP', models.TextField(blank=True, verbose_name='Details of Specimen Preparation')),
                ('PTST_COND', models.CharField(blank=True, max_length=50, verbose_name='Sample Condition')),
                ('PTST_SZUN', models.FloatField(null=True, verbose_name='Size Cut-off of Material Too Coarse for Testing')),
                ('PTST_UNS', models.FloatField(null=True, verbose_name='Proportion of Material Removed Above PTST')),
                ('PTST_DIAM', models.FloatField(null=True, verbose_name='Specimen Diameter')),
                ('PTST_LEN', models.FloatField(null=True, verbose_name='Specimen Length')),
                ('PTST_MC', models.FloatField(null=True, verbose_name='Initial Water/Moisture Content of Test Specimen')),
                ('PTST_BDEN', models.FloatField(null=True, verbose_name='Initial Bulk Density of Test Specimen')),
                ('PTST_DDEN', models.FloatField(null=True, verbose_name='Initial Dry Density')),
                ('PTST_IDIA', models.FloatField(null=True, verbose_name='Diameter of Drain for Radial Permeability in Hydraulic Cell')),
                ('PTST_DMET', models.TextField(blank=True, verbose_name='Method of Forming Central Drain')),
                ('PTST_VOID', models.FloatField(null=True, verbose_name='Initial Voids Ratio')),
                ('PTST_K', models.FloatField(null=True, verbose_name='Coefficient of Permeability')),
                ('PTST_TSTR', models.FloatField(null=True, verbose_name='Mean Effective Stress at which Permeability Measured')),
                ('PTST_HYGR', models.FloatField(null=True, verbose_name='Hydraulic Gradient at which Permeability Measured')),
                ('PTST_ISAT', models.FloatField(null=True, verbose_name='Initial Degree of Saturation')),
                ('PTST_SAT', models.TextField(blank=True, verbose_name='Details of Saturation')),
                ('PTST_CONS', models.TextField(blank=True, verbose_name='Details of Consolidation')),
                ('PTST_PDEN', models.FloatField(null=True, verbose_name='Particle Density with Prefix if Value Assumed')),
                ('PTST_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Type of Permeability Measurement')),
                ('PTST_CELL', models.CharField(blank=True, max_length=50, verbose_name='Type of Permeameter')),
                ('PTST_REM', models.TextField(blank=True, verbose_name='Remarks')),
                ('PTST_METH', models.CharField(blank=True, max_length=50, verbose_name='Test Method')),
                ('PTST_LAB', models.CharField(blank=True, max_length=255, verbose_name='Name of Testing Laboratory/Organization')),
                ('PTST_CRED', models.CharField(blank=True, max_length=50, verbose_name='Accrediting Body and Reference Number')),
                ('TEST_STAT', models.CharField(blank=True, max_length=50, verbose_name='Test Status')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='Associated File Reference')),
                ('SPEC_BASE', models.FloatField(null=True, verbose_name='Depth to Base of Specimen')),
                ('PTST_DEV', models.TextField(blank=True, verbose_name='Deviations from the Test Method')),
                ('PTST_WCIS', models.TextField(blank=True, verbose_name='Initial Water Content Source')),
                ('PTST_WCF', models.FloatField(null=True, verbose_name='Final Water Content of Test Specimen')),
                ('PTST_FSAT', models.FloatField(null=True, verbose_name='Final Degree of Saturation if Determined')),
                ('PTST_TEMP', models.FloatField(null=True, verbose_name='Average Laboratory Temperature at which the Test was Performed')),
                ('PTST_SOUR', models.TextField(blank=True, verbose_name='Source of Permeameter Water')),
                ('PTST_BACK', models.FloatField(null=True, verbose_name='Back Pressure')),
                ('PTST_BVAL', models.FloatField(null=True, verbose_name='B-Value, if Used')),
                ('PTST_LOSS', models.TextField(blank=True, verbose_name='Equipment Head Loss Corrections Applied to the Measurements')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permeability', to='core.samp', verbose_name='Sample ID')),
            ],
        ),
        migrations.CreateModel(
            name='SCCG',
            fields=[
                ('SCCG_TESN', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='Cone ID')),
                ('SCCG_TYPE', models.CharField(max_length=50, verbose_name='Seismic CPT test type')),
                ('SCCG_REF', models.CharField(max_length=50, verbose_name='Cone reference')),
                ('SCCG_HAM', models.CharField(max_length=50, verbose_name='Shear hammer setup')),
                ('SCCG_SHOF', models.FloatField(verbose_name='Horizontal offset between centre of cone and source')),
                ('SCCG_SELE', models.FloatField(verbose_name='Source elevation above seabed')),
                ('SCCG_ZLOC', models.CharField(max_length=50, verbose_name='Location where the zero reading of the cone has been performed for a given push')),
                ('SCCG_OTOP', models.FloatField(verbose_name='Offset between centre of the top receiver and the cone tip')),
                ('SCCG_OBOT', models.FloatField(verbose_name='Offset between centre of the bottom receiver and the cone tip')),
                ('SCCG_REM', models.TextField(verbose_name='Remarks')),
                ('LOCA_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seismic_general', to='core.loca', verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='SCCT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(max_length=50, verbose_name='Location identifier')),
                ('SCCT_GEOP', models.CharField(max_length=50, verbose_name='Selected receiver component')),
                ('SCCT_HDIR', models.CharField(max_length=50, verbose_name='Selected hammer direction')),
                ('SCCT_METH', models.CharField(max_length=50, verbose_name='Selected method for interval velocity')),
                ('SCCT_SWVL', models.FloatField(verbose_name='Final shear wave velocity (Vs final)')),
                ('SCCT_SWD', models.FloatField(verbose_name='Depth corresponding to shear wave velocity measurement')),
                ('SCCT_SWC', models.FloatField(verbose_name='Confidence interval of shear wave velocity')),
                ('SCCT_REM', models.TextField(verbose_name='Remarks')),
                ('FILE_FSET', models.CharField(max_length=255, verbose_name='Associated file reference')),
                ('SCCG_TESN', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seismic_general', to='core.sccg', unique=True, verbose_name='Cone ID')),
            ],
        ),
        migrations.CreateModel(
            name='TRIG',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(blank=True, max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(null=True, verbose_name='Depth to top of sample')),
                ('SAMP_REF', models.CharField(blank=True, max_length=50, verbose_name='Sample reference')),
                ('SAMP_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Sample type')),
                ('SPEC_REF', models.CharField(blank=True, max_length=50, verbose_name='Specimen reference')),
                ('SPEC_DPTH', models.FloatField(null=True, verbose_name='Depth to top of specimen')),
                ('SPEC_DESC', models.TextField(blank=True, verbose_name='Specimen description')),
                ('SPEC_PREP', models.TextField(blank=True, verbose_name='Details of specimen preparation')),
                ('TRIG_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Test type')),
                ('TRIG_COND', models.CharField(blank=True, max_length=50, verbose_name='Sample condition')),
                ('TRIG_REM', models.TextField(blank=True, verbose_name='Remarks on test')),
                ('TRIG_METH', models.CharField(blank=True, max_length=50, verbose_name='Test method')),
                ('TRIG_LAB', models.CharField(blank=True, max_length=255, verbose_name='Testing laboratory/organization')),
                ('TRIG_CRED', models.CharField(blank=True, max_length=50, verbose_name='Accrediting body and reference number')),
                ('TEST_STAT', models.CharField(blank=True, max_length=50, verbose_name='Test status')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='File reference')),
                ('SPEC_BASE', models.FloatField(null=True, verbose_name='Depth to base of specimen')),
                ('TRIG_DEV', models.TextField(blank=True, verbose_name='Deviation from the procedure')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uu_general', to='core.samp', verbose_name='Sample ID')),
            ],
        ),
        migrations.CreateModel(
            name='TRIT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('LOCA_ID', models.CharField(blank=True, max_length=50, verbose_name='Location')),
                ('SAMP_TOP', models.FloatField(null=True, verbose_name='Depth to top of sample')),
                ('SAMP_REF', models.CharField(blank=True, max_length=50, verbose_name='Sample reference')),
                ('SAMP_TYPE', models.CharField(blank=True, max_length=50, verbose_name='Sample type')),
                ('SPEC_REF', models.CharField(blank=True, max_length=50, verbose_name='Specimen reference')),
                ('SPEC_DPTH', models.FloatField(null=True, verbose_name='Depth to top of test specimen')),
                ('TRIT_TESN', models.CharField(blank=True, max_length=50, verbose_name='Triaxial test/stage reference')),
                ('TRIT_SDIA', models.FloatField(null=True, verbose_name='Specimen diameter')),
                ('TRIT_SLEN', models.FloatField(null=True, verbose_name='Specimen length')),
                ('TRIT_IMC', models.FloatField(null=True, verbose_name='Initial water/moisture content')),
                ('TRIT_FMC', models.FloatField(null=True, verbose_name='Final water/moisture content')),
                ('TRIT_CELL', models.FloatField(null=True, verbose_name='Total cell pressure')),
                ('TRIT_DEVF', models.FloatField(null=True, verbose_name='Corrected deviator stress at failure')),
                ('TRIT_BDEN', models.FloatField(null=True, verbose_name='Initial bulk density')),
                ('TRIT_DDEN', models.FloatField(null=True, verbose_name='Initial dry density')),
                ('TRIT_STRN', models.FloatField(null=True, verbose_name='Axial strain at failure')),
                ('TRIT_CU', models.FloatField(null=True, verbose_name='Undrained Shear Strength at failure')),
                ('TRIT_MODE', models.CharField(blank=True, max_length=50, verbose_name='Mode of failure')),
                ('TRIT_REM', models.TextField(blank=True, verbose_name='Comments')),
                ('FILE_FSET', models.CharField(blank=True, max_length=255, verbose_name='Associated file reference')),
                ('TRIT_FZWC', models.FloatField(null=True, verbose_name='Failure zone water content, if measured')),
                ('TRIT_RATE', models.FloatField(null=True, verbose_name='Mean rate of shear')),
                ('TRIT_TYPE', models.TextField(blank=True, verbose_name='Test type')),
                ('TRIT_COND', models.TextField(blank=True, verbose_name='Sample condition')),
                ('TRIT_SENS', models.FloatField(null=True, verbose_name='Sensitivity')),
                ('SAMP_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uu_test', to='core.trig', verbose_name='Sample ID')),
            ],
        ),
    ]
